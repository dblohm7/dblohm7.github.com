<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: async | Aaron Klotz at Mozilla]]></title>
  <link href="http://dblohm7.ca/blog/categories/async/atom.xml" rel="self"/>
  <link href="http://dblohm7.ca/"/>
  <updated>2017-04-07T16:28:16-06:00</updated>
  <id>http://dblohm7.ca/</id>
  <author>
    <name><![CDATA[Aaron Klotz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Asynchronous Plugin Initialization: Requiem]]></title>
    <link href="http://dblohm7.ca/blog/2017/04/07/asynchronous-plugin-initialization-requiem/"/>
    <updated>2017-04-07T15:00:00-06:00</updated>
    <id>http://dblohm7.ca/blog/2017/04/07/asynchronous-plugin-initialization-requiem</id>
    <content type="html"><![CDATA[<p>My colleague bsmedberg is going to be removing asynchronous plugin
initialization in <a title="Remove support for async plugin init" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1352575">bug 1352575</a>. Sadly the feature never became solid enough
to remain enabled on release, so we cut our losses and cancelled the project
early in 2016. Now that code is just a bunch of dead weight. With the
deprecation of non-Flash NPAPI plugins in Firefox 52, our developers are now
working on simplifying the remaining NPAPI code as much as possible.</p>

<p>Obviously the removal of that code does not prevent me from discussing some of
the more interesting facets of that work.</p>

<p>Today I am going to talk about how async plugin init worked when web content
attempted to access a property on a plugin&rsquo;s scriptable object, when that
plugin had not yet completed its asynchronous initialization.</p>

<p>As <a href="https://developer.mozilla.org/en-US/docs/Plugins/Guide/Scripting_plugins">described on MDN</a>,
the DOM queries a plugin for scriptability by calling <code>NPP_GetValue</code> with the
<code>NPPVpluginScriptableNPObject</code> constant. With async plugin init, we did not
return the true scriptable object back to the browser. Instead we returned
a surrogate object. This meant that we did not need to synchronously wait for
the plugin to initialize before returning a scriptable object to the DOM.</p>

<p>If the DOM subsequently called into the surrogate object, the surrogate would
be forced to synchronize with the plugin. There was a limit on how much fakery
the async surrogate could do once an API call forced the browser to synchronize
with the plugin &ndash; after all, the NPAPI itself is entirely synchronous. While
you may question whether that design actually bought us anything, performance
profiles that I took at the time did indeed demonstrate that the asynchronous
surrogate scripting object did buy us enough additional concurrency to make it
worthwhile.</p>

<p>Once the surrogate object had synchronized with the plugin, it would then mostly
act as a pass-through to the plugin&rsquo;s true scriptable object, with one notable
exception: property accesses.</p>

<p>The reason for this is not necessarily obvious, so allow me to elaborate:</p>

<p>The DOM usually sets up a scriptable object as follows:</p>

<pre><samp>
this.__proto__.__proto__.__proto__
</samp></pre>


<ul>
<li>Where <code>this</code> is the WebIDL object (ie, content&rsquo;s <code>&lt;embed&gt;</code> element);</li>
<li>Whose prototype is the NPAPI scriptable object;</li>
<li>Whose prototype is the shared WebIDL prototype;</li>
<li>Whose prototype is <code>Object.prototype</code>.</li>
</ul>


<p>NPAPI is reentrant (some might say <em>insanely</em> reentrant). It is possible (and
indeed common) for a plugin to set properties on the WebIDL object from within
the plugin&rsquo;s <code>NPP_New</code>.</p>

<p>Suppose that the DOM tries to access a property on the plugin&rsquo;s WebIDL object
that is normally set by the plugin&rsquo;s <code>NPP_New</code>. In the asynchronous case, the
plugin&rsquo;s initialization might still be in progress, so that property might not
yet exist.</p>

<p>In the case where the property does not yet exist on the WebIDL object, JavaScript
then moves onto the first prototype, which would actually be the async surrogate.
The async surrogate now synchronizes with the plugin. At this point the plugin is
guaranteed to have finished its initialization.</p>

<p>Now we have a problem: JS is already examining the NPAPI scriptable object,
however the plugin has completed initializing and set its properties (including
the one that we&rsquo;re interested in) on the WebIDL object. JS is already looking too
far up the prototype chain!</p>

<p>The surrogate needed to be aware of this when it synchronized with the plugin
during a property access. If the plugin had already completed its initialization
(rendering synchronization unnecessary), the surrogate would simply pass the
property access on to the real NPAPI scriptable object. On the other hand, if a
synchronization was performed, the surrogate would retry the WebIDL object by
querying for the WebIDL object&rsquo;s &ldquo;own&rdquo; properties, and return the own property
if it now existed.</p>

<p>If I hadn&rsquo;t made the asynchronous surrogate scriptable object do that, we would
have ended up with a strange situation where the DOM&rsquo;s initial property access
on an embed could fail non-deterministically.</p>

<p>That&rsquo;s enough chatter for today. I enjoy blogging about my crazy hacks that make
the impossible, umm&hellip; possible, so maybe I&rsquo;ll write some more of these in the
future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asynchronous Plugin Initialization: Nightly]]></title>
    <link href="http://dblohm7.ca/blog/2014/12/31/asynchronous-plugin-initialization-nightly/"/>
    <updated>2014-12-31T12:00:00-07:00</updated>
    <id>http://dblohm7.ca/blog/2014/12/31/asynchronous-plugin-initialization-nightly</id>
    <content type="html"><![CDATA[<p>As of today&rsquo;s <a href="http://nightly.mozilla.org">Nightly</a>, Asynchronous Plugin
Initialization is available for testing. It is deactivated by default, so in
order to try it out you will need to navigate to <code>about:config</code> and toggle the
<code>dom.ipc.plugins.asyncInit</code> preference to <code>true</code>.</p>

<p>If you experience any problems, please <a href="https://bugzilla.mozilla.org/enter_bug.cgi?product=Core&amp;component=Plug-ins&amp;blocked=1116806">file a bug</a> that blocks <a title="Let Asynchronous Plugin Initialization ride the train" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1116806">bug 1116806</a>.</p>

<p>Happy New Year!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asynchronous Plugin Initialization: An Introduction]]></title>
    <link href="http://dblohm7.ca/blog/2014/06/17/asynchronous-plugin-initialization-an-introduction/"/>
    <updated>2014-06-17T02:30:00-06:00</updated>
    <id>http://dblohm7.ca/blog/2014/06/17/asynchronous-plugin-initialization-an-introduction</id>
    <content type="html"><![CDATA[<p>I have spent a lot of time this quarter working on <a title="Asynchronous Initialization of Out-of-process Plugins" href="https://bugzilla.mozilla.org/show_bug.cgi?id=998863">bug 998863</a>, &ldquo;Asynchronous
Initialization of Out-of-process Plugins.&rdquo; While the bug summary is fairly self
explanatory, I would like to provide some more details about why I am doing this
and what kind of work it entails. I would also like to wrap up the post with an
early demonstration of this feature and present some profiles to illustrate the
potential performance improvement.</p>

<h2>Rationale</h2>

<p>The reason that I am undertaking this project is because NPAPI plugin startup
is our most frequent cause of jank. In fact, at the time of this writing, our
<a href="http://telemetry.mozilla.org/chromehangs/">Chrome Hangs telemetry</a> is showing
that 4 out of our top 10 most frequent offending call stacks are related to
plugin initialization and instantiation. Furthermore, creating the
plugin-container.exe child process is the #1 most frequent chrome hang offender
(Note that our Chrome Hang telemetry consists entirely of Windows builds, where
process creation is quite expensive).</p>

<h2>A High-level Breakdown of NPAPI Initialization and Instantiation</h2>

<p>The typical steps involved can be broken down as follows:</p>

<ol>
<li>Launch the <code>plugin-container</code> process;</li>
<li>Call <code>NP_Initialize</code> to load the plugin;</li>
<li>Create instances by calling <code>NPP_New</code>;</li>
<li>Call <code>NPP_NewStream</code> for instances that load stream data;</li>
<li>If an instance is scriptable, call <code>NPP_GetValue</code> to obtain information
about the plugin&rsquo;s scriptable object.</li>
</ol>


<p>The patch that I am working on modifies steps 1 through 4 to run asynchronously.
Step 5 is a special case &ndash; we asynchronously return a proxy object, but if a
synchronous JS method is called on that object, we must wait for the plugin to
initialize (if it has not yet done so). My hope is that if we have to call a
synchronous JS method on the proxy object, plugin initialization will be far
enough along that the wait will be minimal.</p>

<h2>A Brief Demonstration</h2>

<p>The following video compares two locally-built Nightlies that are identical
except for the asynchronous initialization patch. After loading the browser
with a page containing several embedded Flash objects, we can profile and
observe the effects of this patch.</p>

<iframe width="420" height="315" src="//www.youtube-nocookie.com/embed/HZ8Z2Drv8uI?rel-0" frameborder="0" allowfullscreen></iframe>


<p>Here are links to some profiles:</p>

<p><a href="http://people.mozilla.org/~bgirard/cleopatra/#report=a5a96119742fa75b64ab7d12566eede68468ef3c">Synchronous Plugin Initialization</a></p>

<p><a href="http://people.mozilla.org/~bgirard/cleopatra/#report=282e372d3357316307c182607f26c00f4f41011e">Asynchronous Plugin Initialization</a></p>

<h2>Disclaimer</h2>

<p>This patch requires some further work on scripting and stabilization. The
information in this post is subject to change. :-)</p>
]]></content>
  </entry>
  
</feed>
