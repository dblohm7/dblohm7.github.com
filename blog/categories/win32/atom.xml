<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: win32 | Aaron Klotz at Mozilla]]></title>
  <link href="http://dblohm7.ca/blog/categories/win32/atom.xml" rel="self"/>
  <link href="http://dblohm7.ca/"/>
  <updated>2021-03-30T16:52:53-06:00</updated>
  <id>http://dblohm7.ca/</id>
  <author>
    <name><![CDATA[Aaron Klotz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2019 Roundup: Part 1 - Porting the DLL Interceptor to AArch64]]></title>
    <link href="http://dblohm7.ca/blog/2021/03/01/2019-roundup-part-1/"/>
    <updated>2021-03-01T12:50:00-07:00</updated>
    <id>http://dblohm7.ca/blog/2021/03/01/2019-roundup-part-1</id>
    <content type="html"><![CDATA[<p>In my continuing efforts to get caught up on discussing my work, I am now
commencing a roundup for 2019. I think I am going to structure this one
slightly differently from the last one: I am going to try to segment this
roundup by project.</p>

<p>Here is an index of all the entries in this series:</p>

<ul>
<li><a href="https://dblohm7.ca/blog/2021/03/01/2019-roundup-part-1/">Part 1 - Porting the DLL Interceptor to AArch64</a> (this post)</li>
</ul>


<h2>Porting the DLL Interceptor to AArch64</h2>

<p>During early 2019, Mozilla was working to port Firefox to run on the new
AArch64 builds of Windows. At our December 2018 all-hands, I brought up the
necessity of including the DLL Interceptor in our porting efforts. Since no deed
goes unpunished, I was put in charge of doing the work! [<em>I&rsquo;m actually kidding
here; this project was right up my alley and I was happy to do it! &ndash; Aaron</em>]</p>

<p>Before continuing, you might want to review my <a href="https://dblohm7.ca/blog/2019/01/23/2018-roundup-q2-part1/">previous entry</a>
describing the Great Interceptor Refactoring of 2018, as this post revisits some
of the concepts introduced there.</p>

<p>Let us review some DLL Interceptor terminology:</p>

<ul>
<li>The <em>target function</em> is the function we want to hook (Note that this is a
distinct concept from a <em>branch target</em>, which is also discussed in this post);</li>
<li>The <em>hook function</em> is our function that we want the intercepted target function
to invoke;</li>
<li>The <em>trampoline</em> is a small chunk of executable code generated by the DLL
interceptor that facilitates calling the target function&rsquo;s original implementation.</li>
</ul>


<p>On more than one occasion I had to field questions about why this work was
even necessary for AArch64: there aren&rsquo;t going to be many injected DLLs in a
Win32 ecosystem running on a shiny new processor architecture! In fact, the DLL
Interceptor is used for more than just facilitating the blocking of injected
DLLs; we also use it for other purposes.</p>

<p>Not all of this work was done in one bug: some tasks were more urgent than
others. I began this project by enumerating our extant uses of the interceptor to
determine which instances were relevant to the new AArch64 port. I threw a record
of each instance into a colour-coded spreadsheet, which proved to be very useful
for tracking progress: Reds were &ldquo;must fix&rdquo; instances, yellows were &ldquo;nice to have&rdquo;
instances, and greens were &ldquo;fixed&rdquo; instances. Coordinating with the milestones
laid out by program management, I was able to assign each instance to a bucket
which would help determine a total ordering for the various fixes. I landed the
first set of changes in <a title="nsWindowsDllInterceptor porting to aarch64" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1526383">bug 1526383</a>, and the second set in <a title="ARM64: nsWindowsDllInterceptor support for Milestone 4 (accessibility)" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1532470">bug 1532470</a>.</p>

<p>It was now time to sit down, download some AArch64 programming manuals, and
take a look at what I was dealing with. While I have been messing around with
x86 assembly since I was a teenager, my first exposure to RISC architectures was
via the <a href="https://en.wikipedia.org/wiki/DLX">DLX architecture</a> introduced by
Hennessy and Patterson in their textbooks. While DLX was crafted specifically
for educational purposes, it served for me as a great point of reference. When
I was a student taking CS 241 at the University of Waterloo, we had to write a
toy compiler that generated DLX code. That experience ended up saving me a lot
of time when looking into AArch64! While the latter is definitely more
sophisticated, I could clearly recognize analogs between the two architectures.</p>

<p>In some ways, targeting a RISC architecture greatly simplifies things: The
DLL Interceptor only needs to concern itself with a small subset of the AArch64
instruction set: loads and branches. In fact, the DLL Interceptor&rsquo;s AArch64
disassembler only looks for <a href="https://searchfox.org/mozilla-central/rev/362676fcadac37f9f585141a244a9a640948794a/mozglue/misc/interceptor/Arm64.cpp#53">nine distinct instructions</a>!
As a bonus, since the instruction length is fixed, we can easily copy over
verbatim any instructions that are not loads or branches!</p>

<p>On the other hand, one thing that <em>increased</em> complexity of the port is that
some branch instructions to relative addresses have maximum offsets. If we must
branch farther than that maximum, we must take alternate measures. For example,
in AArch64, an unconditional branch with an immediate offset must land in the
range of &plusmn;128 MiB from the current program counter.</p>

<p>Why is this a problem, you ask? Well, Detours-style interception must overwrite
the first several instructions of the target function. To write an absolute jump,
we require at least 16 bytes: 4 for an <code>LDR</code> instruction, 4 for a <code>BR</code>
instruction, and another 8 for the 64-bit absolute branch target address.</p>

<p>Unfortunately, target functions may be <em>really short</em>! Some of the target
functions that we need to patch consist only of a single 4-byte instruction!</p>

<p>In this case, our only option for patching the target is to use an immediate <code>B</code>
instruction, but that only works if our hook function falls within that &plusmn;128MiB
limit. If it does not, we need to construct a <em>veneer</em>. A veneer is a special
trampoline whose location falls within the target range of a branch instruction.
Its sole purpose is to provide an unconditional jump to the &ldquo;real&rdquo; desired
branch target that lies outside of the range of the original branch. Using
veneers, we can successfully hook a target function even if it is only one
instruction (ie, 4 bytes) in length, and the hook function lies more than 128MiB
away from it. The AArch64 Procedure Call Standard specifies <code>X16</code> as a volatile
register that is explicitly intended for use by veneers: veneers load an
absolute target address into <code>X16</code> (without needing to worry about whether or
not they&rsquo;re clobbering anything), and then unconditionally jump to it.</p>

<h3>Measuring Target Function Instruction Length</h3>

<p>To determine how many instructions the target function has for us to work with,
we make two passes over the target function&rsquo;s code. The first pass simply counts
how many instructions are available for patching (up to the 4 instruction
maximum needed for absolute branches; we don&rsquo;t really care beyond that).</p>

<p>The second pass actually populates the trampoline, builds the veneer (if
necessary), and patches the target function.</p>

<h3>Veneer Support</h3>

<p>Since the DLL interceptor is already well-equipped to build trampolines, it did
not take much effort to add support for <a href="https://searchfox.org/mozilla-central/rev/362676fcadac37f9f585141a244a9a640948794a/mozglue/misc/interceptor/Arm64.h#193">constructing veneers</a>.
However, <em>where</em> to write out a veneer is just as important as <em>what</em> to write
to a veneer.</p>

<p>Recall that we need our veneer to reside within &plusmn;128 MiB of an immediate
branch. Therefore, we need to be able to exercise some control over where
the trampoline memory for veneers is allocated. Until this point, our trampoline
allocator had no need to care about this; I had to add this capability.</p>

<h4>Adding Range-Aware VM Allocation</h4>

<p>Firstly, I needed to make the <code>MMPolicy</code> classes range-aware: we need to be able
to allocate trampoline space within acceptable distances from branch instructions.</p>

<p>Consider that, as described above, a branch instruction may have limits on the
extents of its target. As data, this is easily formatted as a <em>pivot</em> (ie, the
PC at the location where the branch instruction is encoutered), and a maximum
<em>distance</em> in either direction from that pivot.</p>

<p>On the other hand, range-constrained memory allocation tends to work in terms
of lower and upper bounds. I wrote a conversion method, <code>MMPolicyBase::SpanFromPivotAndDistance</code>,
to convert between the two formats. In addition to format conversion, this method
also constrains resulting bounds such that they are above the 1MiB mark of the
process&#8217; address space (to avoid reserving memory in VM regions that are
sensitive to compatiblity concerns), as well as below the maximum allowable
user-mode VM address.</p>

<p>Another issue with range-aware VM allocation is determining the location, within
the allowable range, for the actual VM reservation. Ideally we would like the
kernel&rsquo;s memory manager to choose the best location for us: its holistic view of
existing VM layout (not to mention ASLR) across all processes will provide
superior VM reservations. On the other hand, the Win32 APIs that facilitate this
are specific to Windows 10. When available, <code>MMPolicyInProcess</code> uses <a href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc2"><code>VirtualAlloc2</code></a>
and <code>MMPolicyOutOfProcess</code> uses <a href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-mapviewoffile3"><code>MapViewOfFile3</code></a>.
When we&rsquo;re running on Windows versions where those APIs are not yet available,
we need to fall back to finding and reserving our own range. The
<code>MMPolicyBase::FindRegion</code> method handles this for us.</p>

<p>All of this logic is wrapped up in the <code>MMPolicyBase::Reserve</code> method. In
addition to the desired VM size and range, the method also accepts two functors
that wrap the OS APIs for reserving VM. <code>Reserve</code> uses those functors when
available, otherwise it falls back to <code>FindRegion</code> to manually locate a suitable
reservation.</p>

<p>Now that our memory management primatives were range-aware, I needed to shift my
focus over to our VM sharing policies.</p>

<p>One impetus for the Great Interceptor Refactoring was to enable separate
Interceptor instances to share a unified pool of VM for trampoline memory.
To make this range-aware, I needed to make some additional changes to
<code>VMSharingPolicyShared</code>. It would no longer be sufficient to assume that we
could just share a single block of trampoline VM &mdash; we now needed to make the
shared VM policy capable of potentially allocating multiple blocks of VM.</p>

<p><code>VMSharingPolicyShared</code> now contains a mapping of ranges to VM blocks. If we
request a reservation which an existing block satisfies, we re-use that block.
On the other hand, if we require a range that is yet unsatisfied, then we need to
allocate a new one. I admit that I kind of half-assed the implementation of the
data structure we use for the mapping; I was too lazy to implement a fully-fledged
interval tree. The current implementation is probably &ldquo;good enough,&rdquo; however
it&rsquo;s probably worth fixing at some point.</p>

<p>Finally, I added a new generic class, <code>TrampolinePool</code>, that acts as an
abstraction of a reserved block of VM address space. The main interceptor code
requests a pool by calling the VM sharing policy&rsquo;s <code>Reserve</code> method, then it
uses the pool to retrieve new <code>Trampoline</code> instances to be populated.</p>

<h3>AArch64 Trampolines</h3>

<p>It is much simpler to generate trampolines for AArch64 than it is for x86(-64).
The most noteworthy addition to the <code>Trampoline</code> class is the <code>WriteLoadLiteral</code>
method, which writes an absolute address into the trampoline&rsquo;s literal pool,
followed by writing an <code>LDR</code> instruction referencing that literal into the
trampoline.</p>

<hr />

<p>Thanks for reading! Coming up next time: My Untrusted Modules Opus.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Win32 Gotchas]]></title>
    <link href="http://dblohm7.ca/blog/2017/07/17/win32-gotchas/"/>
    <updated>2017-07-17T12:00:00-06:00</updated>
    <id>http://dblohm7.ca/blog/2017/07/17/win32-gotchas</id>
    <content type="html"><![CDATA[<p>For the second time since I have been at Mozilla I have encountered a situation
where hooks are called for notifications of a newly created window, but that
window has not yet been initialized properly, causing the hooks to behave badly.</p>

<p>The first time was inside our window neutering code in IPC, while the second
time was in our accessibility code.</p>

<p>Every time I have seen this, there is code that follows this pattern:</p>

<pre><code class="c++">HWND hwnd = CreateWindowEx(/* ... */);
if (hwnd) {
  // Do some follow-up initialization to hwnd (Using SetProp as an example):
  SetProp(hwnd, "Foo", bar);
}
</code></pre>

<p>This seems innocuous enough, right?</p>

<p>The problem is that <code>CreateWindowEx</code> calls hooks. If those hooks then try to do
something like <code>GetProp(hwnd, "Foo")</code>, that call is going to fail because the
&ldquo;Foo&rdquo; prop has not yet been set.</p>

<p>The key takeaway from this is that, if you are creating a new window, you must
do any follow-up initialization from within your window proc&rsquo;s <code>WM_CREATE</code>
handler. This will guarantee that your window&rsquo;s initialization will have
completed before any hooks are called.</p>

<p>You might be thinking, &ldquo;But I don&rsquo;t set any hooks!&rdquo; While this may be true, you
must not forget about hooks set by third-party code.</p>

<p>&ldquo;But those hooks won&rsquo;t know anything about my program&rsquo;s internals, right?&rdquo;</p>

<p>Perhaps, perhaps not. But when those hooks fire, they give third-party software
the opportunity to run. In some cases, those hooks might even cause the thread
to <em>reenter your own code</em>. Your window had better be completely initialized
when this happens!</p>

<p>In the case of my latest discovery of this issue in <a title="Window emulation needs to SetProp inside WM_CREATE" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1380471">bug 1380471</a>, I made it
possible to use a C++11 lambda to simplify this pattern.</p>

<p><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms632680.aspx"><code>CreateWindowEx</code></a>
accepts a <code>lpParam</code> parameter which is then passed to the <code>WM_CREATE</code> handler
as the <code>lpCreateParams</code> member of a <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms632603.aspx"><code>CREATESTRUCT</code></a>.</p>

<p>By setting <code>lpParam</code> to a pointer to a <code>std::function&lt;void(HWND)&gt;</code>, we may then
supply any callable that we wish for follow-up window initialization.</p>

<p>Using the previous code sample as a baseline, this allows me to revise the code
to safely set a property like this:</p>

<pre><code class="c++">std::function&lt;void(HWND)&gt; onCreate([](HWND aHwnd) -&gt; void {
  SetProp(aHwnd, "Foo", bar);
});

HWND hwnd = CreateWindowEx(/* ... */, &amp;onCreate);
// At this point is already too late to further initialize hwnd!
</code></pre>

<p>Note that since <code>lpParam</code> is always passed during <code>WM_CREATE</code>, which always fires
before <code>CreateWindowEx</code> returns, it is safe for <code>onCreate</code> to live on the stack.</p>

<p>I liked this solution for the a11y case because it preserved the locality of
the initialization code within the function that called <code>CreateWindowEx</code>; the
window proc for this window is implemented in another source file and the
follow-up initialization depends on the context surrounding the <code>CreateWindowEx</code>
call.</p>

<p>Speaking of window procs, here is how that window&rsquo;s <code>WM_CREATE</code> handler invokes
the callable:</p>

<pre><code class="c++">switch (uMsg) {
  case WM_CREATE: {
    auto createStruct = reinterpret_cast&lt;CREATESTRUCT*&gt;(lParam);
    auto createProc = reinterpret_cast&lt;std::function&lt;void(HWND)&gt;*&gt;(
      createStruct-&gt;lpCreateParams);

    if (createProc &amp;&amp; *createProc) {
      (*createProc)(hwnd);
    }

    return 0;
  }
  // ...
</code></pre>

<p><strong>TL;DR:</strong> If you see a pattern where further initialization work is being done
on an <code>HWND</code> after a <code>CreateWindowEx</code> call, move that initialization code to your
window&rsquo;s <code>WM_CREATE</code> handler instead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I prefer using CRITICAL_SECTIONs for mutexes in Windows Nightly builds]]></title>
    <link href="http://dblohm7.ca/blog/2017/06/12/why-i-prefer-using-critical-sections-for-mutexes-in-windows-nightly-builds/"/>
    <updated>2017-06-12T15:50:43-06:00</updated>
    <id>http://dblohm7.ca/blog/2017/06/12/why-i-prefer-using-critical-sections-for-mutexes-in-windows-nightly-builds</id>
    <content type="html"><![CDATA[<p>In the past I have argued that our Nightly builds, both debug and release, should
use <code>CRITICAL_SECTION</code>s (with full debug info) for our implementation of
<code>mozilla::Mutex</code>. I&rsquo;d like to illustrate some reasons why this is so useful.</p>

<h2>They enable more utility in WinDbg extensions</h2>

<p>Every time you initialize a <code>CRITICAL_SECTION</code>, Windows inserts the CS&rsquo;s
debug info into a process-wide linked list. This enables their discovery by
the Windows debugging engine, and makes the <code>!cs</code>, <code>!critsec</code>, and <code>!locks</code>
commands more useful.</p>

<h2>They enable profiling of their initialization and acquisition</h2>

<p>When the &ldquo;Create user mode stack trace database&rdquo; gflag is enabled, Windows
records the call stack of the thread that called <code>InitializeCriticalSection</code>
on that CS. Windows also records the call stack of the owning thread once
it has acquired the CS. This can be very useful for debugging deadlocks.</p>

<h2>They track their contention counts</h2>

<p>Since every CS has been placed in a process-wide linked list, we may now ask
the debugger to dump statistics about every live CS in the process. In
particular, we can ask the debugger to output the contention counts for each
CS in the process. After running a workload against Nightly, we may then take
the contention output, sort it descendingly, and be able to determine which
<code>CRITICAL_SECTION</code>s are the most contended in the process.</p>

<p>We may then want to more closely inspect the hottest CSes to determine whether
there is anything that we can do to reduce contention and all of the extra
context switching that entails.</p>

<h2>In Summary</h2>

<p>When we use <code>SRWLOCK</code>s or initialize our <code>CRITICAL_SECTION</code>s with the
<code>CRITICAL_SECTION_NO_DEBUG_INFO</code> flag, we are denying ourselves access to this
information. That&rsquo;s fine on release builds, but on Nightly I think it is worth
having around. While I realize that most Mozilla developers have not used this
until now (otherwise I would not be writing this blog post), this rich debugger
info is one of those things that you do not miss until you do not have it.</p>

<p>For further reading about critical section debug info, check out
<a href="https://web.archive.org/web/20150419055323/https://msdn.microsoft.com/en-us/magazine/cc164040.aspx">this</a>
archived article from MSDN Magazine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Team, New Project]]></title>
    <link href="http://dblohm7.ca/blog/2016/04/06/new-team-new-project/"/>
    <updated>2016-04-06T21:00:00-06:00</updated>
    <id>http://dblohm7.ca/blog/2016/04/06/new-team-new-project</id>
    <content type="html"><![CDATA[<p>In February of this year I switched teams: After 3+ years on Mozilla&rsquo;s
Performance Team, and after having the word &ldquo;performance&rdquo; in my job description
in some form or another for several years prior to that, I decided that it was
time for me to move on to new challenges. Fortunately the Platform org was
willing to have me set up shop under the (e10s|sandboxing|platform integration)
umbrella.</p>

<p>I am pretty excited about this new role!</p>

<p>My first project is to sort out the accessibility situation under Windows e10s.
This started back at Mozlando last December. A number of engineers from across
the Platform org, plus me, got together to brainstorm. Not too long after we had
all returned home, I ended up making a suggestion on an email thread that has
evolved into the core concept that I am currently attempting. As is typical at
Mozilla, no deed goes unpunished, so I have been asked to flesh out my ideas.
An overview of this plan is available on the <a href="https://wiki.mozilla.org/Electrolysis/Accessibility/Windows">wiki</a>.</p>

<p>My hope is that I&rsquo;ll be able to deliver a working, &ldquo;version 0.9&rdquo; type of demo
in time for our London all-hands at the end of Q2. Hopefully we will be able to
deliver on that!</p>

<h2>Some Additional Notes</h2>

<p>I am using this section of the blog post to make some additional notes. I don&rsquo;t
feel that these ideas are strong enough to commit to a wiki yet, but I do want
them to be publicly available.</p>

<p>Once concern that our colleagues at NVAccess have identified is that the
current COM interfaces are too chatty; this is a major reason why screen
readers frequently inject libraries into the Firefox address space. If we serve
our content a11y objects as remote COM objects, there is concern that performance
would suffer. This concern is not due to latency, but rather due to frequency
of calls; one function call does not provide sufficient information to the a11y
client. As a result, multiple round trips are required to fetch all of the
information that is required for a particular DOM node.</p>

<p>My gut feeling about this is that this is probably a legitimate concern, however
we cannot make good decisions without quantifying the performance. My plan going
forward is to proceed with a na&iuml;ve implementation of COM remoting to start,
followed by work on reducing round trips as necessary.</p>

<h2>Smart Proxies</h2>

<p>One idea that was discussed is the idea of the content process speculatively
sending information to the chrome process that might be needed in the future.
For example, if we have an <code>IAccessible</code>, we can expect that multiple properties
will be queried off that interface. A smart proxy could ship that data across
the RPC channel during marshaling so that querying that additional information
does not require additional round trips.</p>

<p>COM makes this possible using &ldquo;handler marshaling.&rdquo; I have dug up some
information about how to do this and am posting it here for posterity:</p>

<p><a href="https://www.microsoft.com/msj/0599/com/com0599.aspx">House of COM, May 1999 <em>Microsoft Systems Journal</em></a>;<br/>
<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms683786.aspx">Implementing and Activating a Handler with Extra Data Supplied by Server</a> on MSDN;<br/>
Wicked Code, August 2000 <em>MSDN Magazine</em>. This is not available on the MSDN Magazine website but I have an archived copy on CD-ROM.<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New mozdbgext command: !iat]]></title>
    <link href="http://dblohm7.ca/blog/2016/02/11/new-mozdbgext-command-iat/"/>
    <updated>2016-02-11T18:30:00-07:00</updated>
    <id>http://dblohm7.ca/blog/2016/02/11/new-mozdbgext-command-iat</id>
    <content type="html"><![CDATA[<p>As of today I have added a new command to <code>mozdbgext</code>: <code>!iat</code>.</p>

<p>The syntax is pretty simple:</p>

<p><code>!iat &lt;hexadecimal address&gt;</code></p>

<p>This address shouldn&rsquo;t be just any pointer; it should be the address of an
entry in the current module&rsquo;s import address table (IAT). These addresses
are typically very identifiable by the <code>_imp_</code> prefix in their symbol names.</p>

<p>The purpose of this extension is to look up the name of the DLL from whom the
function is being imported. Furthermore, the extension checks the expected
target address of the import with the actual target address of the import. This
allows us to detect API hooking via IAT patching.</p>

<h3>An Example Session</h3>

<p>I fired up a local copy of Nightly, attached a debugger to it, and dumped the
call stack of its main thread:</p>

<pre><samp>
 # ChildEBP RetAddr
00 0018ecd0 765aa32a ntdll!NtWaitForMultipleObjects+0xc
01 0018ee64 761ec47b KERNELBASE!WaitForMultipleObjectsEx+0x10a
02 0018eecc 1406905a USER32!MsgWaitForMultipleObjectsEx+0x17b
03 0018ef18 1408e2c8 xul!mozilla::widget::WinUtils::WaitForMessage+0x5a
04 0018ef84 13fdae56 xul!nsAppShell::ProcessNextNativeEvent+0x188
05 0018ef9c 13fe3778 xul!nsBaseAppShell::DoProcessNextNativeEvent+0x36
06 0018efbc 10329001 xul!nsBaseAppShell::OnProcessNextEvent+0x158
07 0018f0e0 1038e612 xul!nsThread::ProcessNextEvent+0x401
08 0018f0fc 1095de03 xul!NS_ProcessNextEvent+0x62
09 0018f130 108e493d xul!mozilla::ipc::MessagePump::Run+0x273
0a 0018f154 108e48b2 xul!MessageLoop::RunInternal+0x4d
0b 0018f18c 108e448d xul!MessageLoop::RunHandler+0x82
0c 0018f1ac 13fe78f0 xul!MessageLoop::Run+0x1d
0d 0018f1b8 14090f07 xul!nsBaseAppShell::Run+0x50
0e 0018f1c8 1509823f xul!nsAppShell::Run+0x17
0f 0018f1e4 1514975a xul!nsAppStartup::Run+0x6f
10 0018f5e8 15146527 xul!XREMain::XRE_mainRun+0x146a
11 0018f650 1514c04a xul!XREMain::XRE_main+0x327
12 0018f768 00215c1e xul!XRE_main+0x3a
13 0018f940 00214dbd firefox!do_main+0x5ae
14 0018f9e4 0021662e firefox!NS_internal_main+0x18d
15 0018fa18 0021a269 firefox!wmain+0x12e
16 0018fa60 76e338f4 firefox!__tmainCRTStartup+0xfe
17 0018fa74 77d656c3 KERNEL32!BaseThreadInitThunk+0x24
18 0018fabc 77d6568e ntdll!__RtlUserThreadStart+0x2f
19 0018facc 00000000 ntdll!_RtlUserThreadStart+0x1b
</samp></pre>


<p>Let us examine the code at frame 3:</p>

<pre><samp>
14069042 6a04            push    4
14069044 68ff1d0000      push    1DFFh
14069049 8b5508          mov     edx,dword ptr [ebp+8]
1406904c 2b55f8          sub     edx,dword ptr [ebp-8]
1406904f 52              push    edx
14069050 6a00            push    0
14069052 6a00            push    0
14069054 ff159cc57d19    call    dword ptr [xul!_imp__MsgWaitForMultipleObjectsEx (197dc59c)]
1406905a 8945f4          mov     dword ptr [ebp-0Ch],eax
</samp></pre>


<p>Notice the function call to <code>MsgWaitForMultipleObjectsEx</code> occurs indirectly;
the call instruction is referencing a pointer within the <code>xul.dll</code> binary
itself. This is the IAT entry that corresponds to that function.</p>

<p>Now, if I load <code>mozdbgext</code>, I can take the address of that IAT entry and execute
the following command:</p>

<pre><samp>
0:000> !iat 0x197dc59c
Expected target: USER32.dll!MsgWaitForMultipleObjectsEx
Actual target: USER32!MsgWaitForMultipleObjectsEx+0x0
</samp></pre>


<p><code>!iat</code> has done two things for us:</p>

<ol>
<li>It did a reverse lookup to determine the module and function name for the
import that corresponds to that particular IAT entry; and</li>
<li>It followed the IAT pointer and determined the symbol at the target address.</li>
</ol>


<p>Normally we want both the expected and actual targets to match. If they don&rsquo;t,
we should investigate further, as this mismatch may indicate that the IAT has
been patched by a third party.</p>

<p>Note that <code>!iat</code> command is breakpad aware (provided that you&rsquo;ve already
loaded the symbols using <code>!bploadsyms</code>) but can fall back to the Microsoft
symbol engine as necessary.</p>

<p>Further note that the <code>!iat</code> command does not yet accept the <code>_imp_</code> symbolic
names for the IAT entries, you need to enter the hexadecimal representation of
the pointer.</p>
]]></content>
  </entry>
  
</feed>
