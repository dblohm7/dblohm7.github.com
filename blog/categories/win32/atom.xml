<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: win32 | Aaron Klotz at Mozilla]]></title>
  <link href="http://dblohm7.ca/blog/categories/win32/atom.xml" rel="self"/>
  <link href="http://dblohm7.ca/"/>
  <updated>2015-08-30T01:58:56-06:00</updated>
  <id>http://dblohm7.ca/</id>
  <author>
    <name><![CDATA[Aaron Klotz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Interesting Win32 APIs]]></title>
    <link href="http://dblohm7.ca/blog/2015/07/28/interesting-win32-apis/"/>
    <updated>2015-07-28T11:30:00-06:00</updated>
    <id>http://dblohm7.ca/blog/2015/07/28/interesting-win32-apis</id>
    <content type="html"><![CDATA[<p>Yesterday I decided to diff the export tables of some core Win32 DLLs to see what&rsquo;s
changed between Windows 8.1 and the Windows 10 technical preview. There weren&rsquo;t
many changes, but the ones that were there are quite exciting IMHO. While
researching these new APIs, I also stumbled across some others that were
added during the Windows 8 timeframe that we should be considering as well.</p>

<h2>Volatile Ranges</h2>

<p>While my diff showed these APIs as new exports for Windows 10, the MSDN docs
claim that these APIs are actually new for the Windows 8.1 Update. Using the
<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dn781436%28v=vs.85%29.aspx"><code>OfferVirtualMemory</code></a>
and <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dn781437%28v=vs.85%29.aspx"><code>ReclaimVirtualMemory</code></a>
functions, we can now specify ranges of virtual memory that are safe to
discarded under memory pressure. Later on, should we request that access be
restored to that memory, the kernel will either return that virtual memory to us
unmodified, or advise us that the associated pages have been discarded.</p>

<p>A couple of years ago we had an intern on the Perf Team who was working on
bringing this capability to Linux. I am pleasantly surprised that this is now
offered on Windows.</p>

<h2><code>madvise(MADV_WILLNEED)</code> for Win32</h2>

<p>For the longest time we have been hacking around the absence of a <code>madvise</code>-like
API on Win32. On Linux we will do a <code>madvise(MADV_WILLNEED)</code> on memory-mapped
files when we want the kernel to read ahead. On Win32, we were opening the
backing file and then doing a series of sequential reads through the file to
force the kernel to cache the file data. As of Windows 8, we can now call
<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/hh780543%28v=vs.85%29.aspx"><code>PrefetchVirtualMemory</code></a>
for a similar effect.</p>

<h2>Operation Recorder: An API for SuperFetch</h2>

<p>The <a href="https://msdn.microsoft.com/en-us/library/hh437562%28v=vs.85%29.aspx"><code>OperationStart</code></a>
and <a href="https://msdn.microsoft.com/en-us/library/hh437558%28v=vs.85%29.aspx"><code>OperationEnd</code></a>
APIs are intended to record access patterns during a file I/O operation.
SuperFetch will then create prefetch files for the operation, enabling prefetch
capabilities above and beyond the use case of initial process startup.</p>

<h2>Memory Pressure Notifications</h2>

<p>This API is not actually new, but I couldn&rsquo;t find any invocations of it in the
Mozilla codebase. <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa366541%28v=vs.85%29.aspx"><code>CreateMemoryResourceNotification</code></a>
allocates a kernel handle that becomes signalled when physical memory is running
low. Gecko already has facilities for handling memory pressure events on other
platforms, so we should probably add this to the Win32 port.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WaitMessage Considered Harmful]]></title>
    <link href="http://dblohm7.ca/blog/2015/03/12/waitmessage-considered-harmful/"/>
    <updated>2015-03-12T15:00:00-06:00</updated>
    <id>http://dblohm7.ca/blog/2015/03/12/waitmessage-considered-harmful</id>
    <content type="html"><![CDATA[<p>I could apologize for the clickbaity title, but I won&rsquo;t. I have no shame.</p>

<p>Today I want to talk about some code that we imported from Chromium some time
ago. I replaced it in Mozilla&rsquo;s codebase a few months back in <a title="IPC message pump for windows should use WinUtils::WaitForMessage" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1072752">bug 1072752</a>:</p>

<p><figure class='code'><figcaption><span> (message_pump_win.cc)</span> <a href='/downloads/code/message_pump_win.cc'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'>    <span class="c1">// A WM_* message is available.</span>
</span><span class='line'>    <span class="c1">// If a parent child relationship exists between windows across threads</span>
</span><span class='line'>    <span class="c1">// then their thread inputs are implicitly attached.</span>
</span><span class='line'>    <span class="c1">// This causes the MsgWaitForMultipleObjectsEx API to return indicating</span>
</span><span class='line'>    <span class="c1">// that messages are ready for processing (Specifically, mouse messages</span>
</span><span class='line'>    <span class="c1">// intended for the child window may appear if the child window has</span>
</span><span class='line'>    <span class="c1">// capture).</span>
</span><span class='line'>    <span class="c1">// The subsequent PeekMessages call may fail to return any messages thus</span>
</span><span class='line'>    <span class="c1">// causing us to enter a tight loop at times.</span>
</span><span class='line'>    <span class="c1">// The WaitMessage call below is a workaround to give the child window</span>
</span><span class='line'>    <span class="c1">// some time to process its input messages.</span>
</span><span class='line'>    <span class="n">MSG</span> <span class="n">msg</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>    <span class="n">DWORD</span> <span class="n">queue_status</span> <span class="o">=</span> <span class="n">GetQueueStatus</span><span class="p">(</span><span class="n">QS_MOUSE</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">HIWORD</span><span class="p">(</span><span class="n">queue_status</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">QS_MOUSE</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>        <span class="o">!</span><span class="n">PeekMessage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">msg</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">WM_MOUSEFIRST</span><span class="p">,</span> <span class="n">WM_MOUSELAST</span><span class="p">,</span> <span class="n">PM_NOREMOVE</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">WaitMessage</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>This code is wrong. <strong>Very</strong> wrong.</p>

<p>Let us start with the calls to <code>GetQueueStatus</code> and <code>PeekMessage</code>. Those APIs
mark any messages already in the thread&rsquo;s message queue as having been seen,
such that they are no longer considered &ldquo;new.&rdquo; Even though those function calls
do not remove messages from the queue, any messages that were in the queue at
this point are considered to be &ldquo;old.&rdquo;</p>

<p>The logic in this code snippet is essentially saying, &ldquo;if the queue contains
mouse messages that do not belong to this thread, then they must belong to an
attached thread.&rdquo; The code then calls <code>WaitMessage</code> in an effort to give the
other thread(s) a chance to process their mouse messages. This is where the code
goes off the rails.</p>

<p>The <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms644956%28v=vs.85%29.aspx">documentation</a>
for <code>WaitMessage</code> states the following:</p>

<blockquote><p>Note that <code>WaitMessage</code> does not return if there is unread input in the message
queue after the thread has called a function to check the queue. This is
because functions such as <code>PeekMessage</code>, <code>GetMessage</code>, <code>GetQueueStatus</code>,
<code>WaitMessage</code>, <code>MsgWaitForMultipleObjects</code>, and <code>MsgWaitForMultipleObjectsEx</code>
check the queue and then change the state information for the queue so that
the input is no longer considered new. A subsequent call to <code>WaitMessage</code> will
not return until new input of the specified type arrives. The existing unread
input (received prior to the last time the thread checked the queue) is ignored.</p></blockquote>

<p><code>WaitMessage</code> will only return if there is <em>a new</em> (as opposed to <em>any</em>) message
in the queue for the calling thread. Any messages for the calling thread that
were already in there at the time of the <code>GetQueueStatus</code> and <code>PeekMessage</code> calls
are no longer new, so they are ignored.</p>

<p>There might very well be a message at the head of that queue that should be
processed by the current thread. Instead it is ignored while we wait for other
threads. Here is the crux of the problem: we&rsquo;re waiting on other threads whose
input queues are attached to our own! That other thread can&rsquo;t process its
messages because our thread has messages in front of its messages; on the other
hand, our thread has blocked itself!</p>

<p>The only way to break this deadlock is for new messages to be added to the queue.
That is a big reason why we&rsquo;re seeing things like <a title="Page doesn't load/render if the mouse is not moving" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1105386">bug 1105386</a>: Moving the
mouse adds new messages to the queue, making <code>WaitMessage</code> unblock.</p>

<p>I&rsquo;ve already eliminated this code in Mozilla&rsquo;s codebase, but the challenge is
going to be getting rid of this code in third-party binaries that attach their
own windows to Firefox&rsquo;s windows.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Attached Input Queues on Firefox for Windows]]></title>
    <link href="http://dblohm7.ca/blog/2015/03/03/attached-input-queues-on-firefox-for-windows/"/>
    <updated>2015-03-03T17:28:06-07:00</updated>
    <id>http://dblohm7.ca/blog/2015/03/03/attached-input-queues-on-firefox-for-windows</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve <a href="http://dblohm7.ca/blog/2012/11/22/plugin-hang-user-interface-for-firefox/">previously</a> <a href="http://dblohm7.ca/blog/2013/02/15/plugin-hang-ui-on-aurora/">blogged</a>
indirectly about attached input queues, but today I want to address the issue directly. What once was a nuisance in the realm of plugin hangs has grown into a more
serious problem in the land of OMTC and e10s.</p>

<p>As a brief recap for those who are not very familiar with this problem: imagine two windows, each on their own separate threads, forming a parent-child relationship
with each other. When this situation arises, Windows implicitly attaches together and synchronizes their input queues, putting each thread at the mercy of the other
attached threads&#8217; ability to pump messages. If one thread does something bad in its message pump, any other threads that are attached to it are likely to be affected as well.</p>

<p>One of the biggest annoyances when it comes to knowledge about which threads are affected, is that we are essentially flying blind. There is no
way to query Windows for information about attached input queues. This is unfortunate, as it would be really nice to obtain some specific knowledge to allow us to
analyze the state of Firefox threads&#8217; input queues so that we can mitigate the problem.</p>

<p>I had previously been working on a personal side project to make this possible, but in light of recent developments (and a <a href="https://twitter.com/nsIAnswers/status/565883284748795905">tweet from bsmedberg</a>),
I decided to bring this investigation under the umbrella of my full-time job. I&rsquo;m pleased to announce that I&rsquo;ve finished the first cut of a utility that I call
the Input Queue Visualizer, or <code>iqvis</code>.</p>

<p><code>iqvis</code> consists of two components, one of which is a kernel-mode driver. This driver exposes input queue attachment data to user mode. The <code>iqvis</code> user-mode
executable is the client that queries the driver and outputs the results. In the next section I&rsquo;m going to discuss the inner workings of <code>iqvis</code>. Following that, I&rsquo;ll
discuss the <a href="#results">results</a> of running <code>iqvis</code> on an instance of Firefox.</p>

<h2><a name="internals"></a>Input Queue Visualizer Internals</h2>

<p>First of all, let&rsquo;s start off with this caveat: <strong>Nearly everything that this driver does involves undocumented APIs and data structures</strong>. Because of this, <code>iqvis</code>
does some things that you should never do in production software.</p>

<p>One of the big consequences of using undocumented information is that <code>iqvis</code> requires pointers to very specific locations
in kernel memory to accomplish things. These pointers will change every time that Windows is updated. To mitigate this, I kind of cheated: it turns out that
debugging symbols exist for all of the locations that <code>iqvis</code> needs to access! I wrote the <code>iqvis</code> client to invoke the <code>dbghelp</code> engine to extract the pointers that
I need from Windows symbols and send those values as the input to the <code>DeviceIoControl</code> call that triggers the data collection. Passing pointers from user mode to be
accessed in kernel mode is a very dangerous thing to do (and again, I would never do it in production software), but it is damn convenient for <code>iqvis</code>!</p>

<p>Another issue is that these undocumented details change between Windows versions. The initial version of <code>iqvis</code> works on 64-bit Windows 8.1, but different code is required
for other major releases, such as Windows 7. The <code>iqvis</code> driver theoretically will work on Windows 7 but I need to make a few bug fixes for that case.</p>

<p>So, getting those details out of the way, we can address the crux of the problem: we need to query input queue attachment information from <code>win32k.sys</code>, which is the
driver that implements USER and GDI system calls on Windows NT systems.</p>

<p>In particular, the window manager maintains a linked list that describes thread attachment info as a triple that points to the &ldquo;from&rdquo; thread, the &ldquo;to&rdquo; thread, and a count.
The count is necessary because the same two threads may be attached to each other multiple times. The <code>iqvis</code> driver walks this linked list in a thread-safe way to obtain
the attachment data, and then copies it to the output buffer for the <code>DeviceIoControl</code> request.</p>

<p>Since <code>iqvis</code> involves a device driver, and since I have not digitally signed that device driver, one can&rsquo;t just run <code>iqvis</code> and call it a day. This program won&rsquo;t work
unless the computer was either booted with kernel debugging enabled, or it was booted with driver signing temporarily disabled.</p>

<h2><a name="results"></a>Running <code>iqvis</code> against Firefox</h2>

<p>Today I ran <code>iqvis</code> using today&rsquo;s Nightly 39 as well as the lastest release of Flash. I also tried it with Flash Protected Mode both disabled and enabled.
(Note that these examples used an older version of <code>iqvis</code> that outputs thread IDs in hexadecimal. The current version uses decimal for its output.)</p>

<h3>Protected Mode Disabled</h3>

<pre><samp>FromTID ToTID Count
ac8 df4 1
</samp></pre>


<p>Looking up the thread IDs:</p>

<ul>
<li><code>df4</code> is the Firefox main thread;</li>
<li><code>ac8</code> is the plugin-container main thread.</li>
</ul>


<p>I think that the output from this case is pretty much what I was expecting to see. The protected mode case, however, is more interesting.</p>

<h3>Protected Mode Enabled</h3>

<pre><samp>FromTID ToTID Count
f8c dbc 1
794 f8c 3
</samp></pre>


<p>Looking up the thread IDs:</p>

<ul>
<li><code>dbc</code> is the Firefox main thread;</li>
<li><code>f8c</code> is the plugin-container main thread;</li>
<li><code>794</code> is the Flash sandbox main thread.</li>
</ul>


<p>Notice how Flash is attached to plugin-container, which is then attached to Firefox. Notice that transitively the Flash sandbox is effectively attached to Firefox,
confirming previous hypotheses that I&rsquo;ve discussed with colleagues in the past.</p>

<p>Also notice how the Flash sandbox attachment to plugin-container has a count of 3!</p>

<h2>In Conclusion</h2>

<p>In my opinion, my Input Queue Visualizer has already yielded some very interesting data. Hopefully this will help us to troubleshoot our issues in the future. Oh,
and the code is up on <a href="https://github.com/dblohm7/iqvis">GitHub</a>! It&rsquo;s poorly documented at the moment, but just remember to only try running it on 64-bit Windows
8.1 for the time being!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plugin Hang User Interface for Firefox]]></title>
    <link href="http://dblohm7.ca/blog/2012/11/22/plugin-hang-user-interface-for-firefox/"/>
    <updated>2012-11-22T10:22:00-07:00</updated>
    <id>http://dblohm7.ca/blog/2012/11/22/plugin-hang-user-interface-for-firefox</id>
    <content type="html"><![CDATA[<p>My first significant project at Mozilla has been
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=805591">bug 805591</a>,
implementing a user interface to be displayed by Firefox when
an out-of-process plugin hangs. This is important because when NPAPI
plugins hang, they block the main thread in Firefox. When the main
thread is blocked, the Firefox user interface grinds to a halt.</p>

<p>The purpose of the Plugin Hang UI is twofold:</p>

<ul>
<li>To inform the user which plugin is responsible for the hang; and</li>
<li>Provide the user with an opportunity to terminate the plugin if he/she wishes.</li>
</ul>


<p>Currently this is feature is exclusive to Firefox Desktop on Windows.
When the Hang UI is invoked, you&rsquo;ll notice that Firefox has created
a new child process, plugin-hang-ui.exe. This child process will
display the Plugin Hang UI dialog box.</p>

<p><img class="<a" src="href="http://dblohm7.ca/images/hangui.png">http://dblohm7.ca/images/hangui.png</a>&#8221;></p>

<p>My patch is currently under review, but the Plugin Hang UI is fully functional
in a <a href="http://ftp.mozilla.org/pub/mozilla.org/firefox/try-builds/aklotz@mozilla.com-f5d8fdf4f29a/try-win32/firefox-19.0a1.en-US.win32.installer.exe">try build</a>,
so please check it out and play with it!</p>

<h2>Changes to Preferences</h2>

<ul>
<li><p><code>dom.ipc.plugins.hangUITimeoutSecs</code>: This is the number of seconds
that Firefox waits for a hung plugin before displaying the Plugin Hang UI.
Setting this value to zero disables the Plugin Hang UI.</p></li>
<li><p><code>dom.ipc.plugins.timeoutSecs</code>: This pref is still used with the Hang UI,
but its semantics change a little bit. Once the Plugin Hang UI has been
displayed, Firefox will wait <code>dom.ipc.plugins.timeoutSecs</code> seconds before
terminating the plugin automatically, even if the user did not elect to
stop the plugin using the Hang UI. This is nearly identical to the way that
Firefox behaves without the Hang UI &ndash; the only difference is that now this
timeout period doesn&rsquo;t commence until the Hang UI is displayed.</p></li>
<li><p><code>dom.ipc.plugins.hangUIMinDisplaySecs</code>: This is the minimum number
of seconds that Firefox should display the Plugin Hang UI. If
<code>dom.ipc.plugins.timeoutSecs</code> is set to a value lower than this
pref, the Hang UI is disabled. The idea here is that, if
<code>dom.ipc.plugins.timeoutSecs</code> is only set to 5 seconds to begin with,
then the plugin will already have been auto terminated before the
user has half a chance to read the Plugin Hang UI.</p></li>
</ul>


<h2>Implementation Details</h2>

<p>There are a couple of interesting things that I&rsquo;d like to point out
relating to this patch.</p>

<p>Because the Plugin Hang UI is a child process, I needed to ensure that
its window always appears in front of the hung Firefox window. I decided
that I would have Firefox send its top-level <code>HWND</code> over to the child
process so that the Hang UI could specify that handle as the owner of its
top-level window. If you&rsquo;ve seen <a href="http://blogs.msdn.com/b/oldnewthing">Raymond Chen&rsquo;s</a>
<a href="http://channel9.msdn.com/Blogs/scobleizer/Raymond-Chen-PDC-05-Talk-Five-Things-Every-Win32-Programmer-Needs-to-Know">Five Things Every Win32 Programmer Needs to Know</a>,
then you&rsquo;ll know what is coming: Deadlock!</p>

<p>The problem is that the Hang UI window and the Firefox window are
created by different threads. When I set the owner relationship
between the Hang UI top-level window and the Firefox top-level window,
the window manager implicitly synchronizes both threads&#8217; input queues.
In the case of the Plugin Hang UI, this is a huge problem: Windows just
synchronized the Hang UI&rsquo;s input queue with a hung thread!</p>

<p>What&rsquo;s the solution, then? Think about it this way: the window manager
might have implicitly synchronized the two threads&#8217; input queues, but
there&rsquo;s no reason why we can&rsquo;t then <em>explicitly</em> desynchronize them!</p>

<p>Here&rsquo;s the first thing I do in the Plugin Hang UI&rsquo;s <code>WM_INITDIALOG</code> handler:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'>      <span class="c1">// Disentangle our input queue from the hung Firefox process</span>
</span><span class='line'>      <span class="n">AttachThreadInput</span><span class="p">(</span><span class="n">GetCurrentThreadId</span><span class="p">(),</span>
</span><span class='line'>                        <span class="n">GetWindowThreadProcessId</span><span class="p">(</span><span class="n">mParentWindow</span><span class="p">,</span> <span class="n">nullptr</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">FALSE</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Without this line, the Hang UI is at risk of deadlock. This is
especially true if the user attempts to send input to the Firefox
window underneath.</p>
]]></content>
  </entry>
  
</feed>
