<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mozilla | Aaron Klotz at Mozilla]]></title>
  <link href="http://dblohm7.ca/blog/categories/mozilla/atom.xml" rel="self"/>
  <link href="http://dblohm7.ca/"/>
  <updated>2021-02-24T17:33:24-07:00</updated>
  <id>http://dblohm7.ca/</id>
  <author>
    <name><![CDATA[Aaron Klotz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2018 Roundup: H2]]></title>
    <link href="http://dblohm7.ca/blog/2021/02/24/2018-roundup-h2/"/>
    <updated>2021-02-24T17:30:00-07:00</updated>
    <id>http://dblohm7.ca/blog/2021/02/24/2018-roundup-h2</id>
    <content type="html"><![CDATA[<p><em>This is the fifth post in my &ldquo;2018 Roundup&rdquo; series. For an index of all entries, please see my
blog entry for <a href="https://dblohm7.ca/blog/2019/01/18/2018-roundup-q1/">Q1</a>.</em></p>

<p>Yes, you are reading the dates correctly: I am posting this nearly two years after I began this series.
I am trying to get caught up on documenting my past work!</p>

<h2>Preparing to Enable the Launcher Process by Default</h2>

<h3>CI and Developer Tooling</h3>

<p>Given that the launcher process completely changes how our Win32 Firefox builds
start, I needed to update both our CI harnesses, as well as the launcher process
itself. I didn&rsquo;t do much that was particularly noteworthy from a technical
standpoint, but I will mention some important points:</p>

<p>During normal use, the launcher process usually exits immediately after the
browser process is confirmed to have started. This was a deliberate design
decision that I made. Having the launcher process wait for the browser process
to terminate would not do any harm, however I did not want the launcher process
hanging around in Task Manager and being misunderstood by users who are checking
their browser&rsquo;s resource usage.</p>

<p>On the other hand, such a design completely breaks scripts that expect to start
Firefox and be able to synchronously wait for the browser to exit before
continuing! Clearly I needed to provide an opt-in for the latter case, so I added
the <code>--wait-for-browser</code> command-line option. The launcher process also implicitly
enables this mode under a few <a href="https://searchfox.org/mozilla-central/rev/31a3457890b5698af1277413ee9d9bd6c5955183/browser/app/winlauncher/LauncherProcessWin.cpp#92">other scenarios</a>.</p>

<p>Secondly, there is the issue of debugging. Developers were previously used to
attaching to the first <code>firefox.exe</code> process they see and expecting to be debugging
the browser process. With the launcher process enabled by default, this is no
longer the case.</p>

<p>There are few options here:</p>

<ul>
<li>Visual Studio users may install the <a href="https://devblogs.microsoft.com/devops/introducing-the-child-process-debugging-power-tool/">Child Process Debugging Power Tool</a>,
which enables the VS debugger to attach to child processes;</li>
<li>WinDbg users may start their debugger with the <code>-o</code> command-line flag,
or use the <code>Debug child processes also</code> checkbox in the GUI;</li>
<li>I added support for a <code>MOZ_DEBUG_BROWSER_PAUSE</code> environment variable, which
allows developers to set a timeout (in seconds) for the browser process to
print its pid to <code>stdout</code> and wait for a debugger attachment.</li>
</ul>


<h3>Performance Testing</h3>

<p>As I have alluded to in previous posts, I needed to measure the effect of adding
an additional process to the critical path of Firefox startup. Since in-process
testing will not work in this case, I needed to use something that could provide
a holistic view across both launcher and browser processes. I decided to enhance
our existing <code>xperf</code> suite in Talos to support my use case.</p>

<p>I already had prior experience with <code>xperf</code>; I spent a significant part of 2013
working with Joel Maher to put the <code>xperf</code> Talos suite into production. I also
knew that the existing code was not sufficiently generic to be able to handle my
use case.</p>

<p>I threw together a rudimentary <a href="https://github.com/dblohm7/xperf">analysis framework</a>
for working with CSV-exported xperf data. Then, after Joel&rsquo;s review, I vendored
it into <code>mozilla-central</code> and used it to construct an analysis for startup time.
[<em>While a more thorough discussion of this framework is definitely warranted, I
also feel that it is tangential to the discussion at hand; I&rsquo;ll write a dedicated
blog entry about this topic in the future. &ndash; Aaron</em>]</p>

<p>In essence, the analysis considers the following facts when processing an xperf recording:</p>

<ul>
<li>The launcher process will be the first <code>firefox.exe</code> process that runs;</li>
<li>The browser process will be started by the launcher process;</li>
<li>The browser process will fire a <a href="https://searchfox.org/mozilla-central/source/toolkit/components/startup/mozprofilerprobe.mof">session store window restored</a> event.</li>
</ul>


<p>For our analysis, we needed to do the following:</p>

<ol>
<li>Find the event showing the first <code>firefox.exe</code> process being created;</li>
<li>Find the session store window restored event from the second process;</li>
<li>Output the time interval between the two events.</li>
</ol>


<p><a href="https://searchfox.org/mozilla-central/rev/31a3457890b5698af1277413ee9d9bd6c5955183/testing/talos/talos/xtalos/parse_xperf.py#36">This block of code</a>
demonstrates how that analysis is specified using my analyzer framework.</p>

<p>Overall, these test results were quite positive. We saw a very slight but
imperceptible increase in startup time on machines with solid-state drives,
however the security benefits from the launcher process outweigh this very small
regression.</p>

<p>Most interestingly, we saw a signficant <em>improvement</em> in startup time on Windows
10 machines with magnetic hard disks! As I mentioned in Q2 Part 3, I believe
this improvement is due to reduced hard disk seeking thanks to the launcher
process forcing <code>\windows\system32</code> to the front of the dynamic linker&rsquo;s search
path.</p>

<h3>Error and Experimentation Readiness</h3>

<p>By Q3 I had the launcher process in a state where it was built by default into
Firefox, but it was still opt-in. As I have written previously, we needed the
launcher process to gracefully fail even without having the benefit of various
Gecko services such as telemetry and the crash reporter.</p>

<h4>Error Propagation</h4>

<p>First of call, I created a new class, <a href="https://searchfox.org/mozilla-central/rev/31a3457890b5698af1277413ee9d9bd6c5955183/widget/windows/WinHeaderOnlyUtils.h#73"><code>WindowsError</code></a>,
that encapsulates all types of Windows error codes. As an aside, I would strongly
encourage all Gecko developers who are writing new code that invokes Windows APIs
to use this class in your error handling.</p>

<p><code>WindowsError</code> is currently able to store Win32 <code>DWORD</code> error codes, <code>NTSTATUS</code>
error codes, and <code>HRESULT</code> error codes. Internally the code is stored as an
<code>HRESULT</code>, since that type has encodings to support the other two. <code>WindowsError</code>
also provides a method to convert its error code to a localized string for
human-readable output.</p>

<p>As for the launcher process itself, nearly every function in the launcher
process returns a <code>mozilla::Result</code>-based type. In case of error, we return a
<code>LauncherResult</code>, which [<em>as of 2018; this has changed more recently &ndash; Aaron</em>]
is a structure containing the error&rsquo;s source file, line number, and <code>WindowsError</code>
describing the failure.</p>

<h4>Detecting Browser Process Failures</h4>

<p>While all <code>Result</code>s in the launcher process may be indicating a successful
start, we may not yet be out of the woods! Consider the possibility that the
various interventions taken by the launcher process might have somehow impaired
the browser process&rsquo;s ability to start!</p>

<p>The way we deal with this is to record timestamps for both the launcher process
and the browser process. We record these timestamps in a way that distinguishes
between multiple distinct Firefox installations.</p>

<p>In the ideal scenario where both processes are functioning correctly, we expect
a timestamp for the launcher process to be recorded, followed by a timestamp for
the browser process.</p>

<p>If something goes wrong with the browser process, it will not be able to
record its timestamp.</p>

<p>The next time the launcher process is started, it checks for timestamps recorded
from the previous run. If the browser process&rsquo;s timestamp is either missing or
older than the previous launcher timestamp, then we know that something went
wrong. In this case, the launcher process disables itself and proceeds to start
the browser process without any of its usual interventions.</p>

<p>Once the browser has successfully started, it reflects the launcher process
state into telemetry, preferences, and <code>about:support</code>.</p>

<p>Future attempts to start Firefox will bypass the launcher process until the
next time the installation&rsquo;s binaries are updated, at which point we reset the
timestamps and attempt once again to start with the launcher process. We do this
in the hope that whatever was failing in version <em>n</em> might be fixed in version
<em>n + 1</em>.</p>

<p>Note that this update behaviour implies that there is no way to forcibly and
permanently disable the launcher process. This is by design: the timestamp
feature is designed to prevent the browser from becoming unusable, not to provide
configurability. The launcher process is a security feature and not something
that we should want users adjusting any more than we would want users to be
disabling the capability system or some other important security mitigation. In
fact, my original roadmap for InjectEject called for eventually removing the
timestamp code once the launcher failure rate became small enough.</p>

<h4>Experimentation and Emergency</h4>

<p>The pref reflection built into the timestamp system is bi-directional. This
allowed us to ship a release where we ran a study with a fraction of users
running with the launcher process enabled by default.</p>

<p>Once we rolled out the launcher process at 100%, this pref also served as a
useful &ldquo;emergency kill switch&rdquo; that we could have flipped if necessary.</p>

<p>Fortunately our experiments were successful and we rolled the launcher process
out to release at 100% without ever needing the kill switch!</p>

<p>At this point, this pref should probably be removed, as we no longer need nor
want to control launcher process deployment in this way.</p>

<h4>Error Reporting</h4>

<p>When telemetry is enabled, the launcher process is able to convert its
<code>LauncherResult</code> into a ping which is sent in the background by <code>ping-sender</code>.
When telemetry is disabled, we perform a last-ditch effort to surface the error
by logging details about the <code>LauncherResult</code> failure in the Windows Event Log.</p>

<h3>In Conclusion</h3>

<p>Thanks for reading! This concludes my 2018 Roundup series! There is so much more
work from 2018 that I did for this project that I wish I could discuss, but for
security reasons I must refrain. Nonetheless, I hope you enjoyed this series.
Stay tuned for more roundups in the future!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2018 Roundup: Q2, Part 3]]></title>
    <link href="http://dblohm7.ca/blog/2021/01/05/2018-roundup-q2-part3/"/>
    <updated>2021-01-05T09:45:00-07:00</updated>
    <id>http://dblohm7.ca/blog/2021/01/05/2018-roundup-q2-part3</id>
    <content type="html"><![CDATA[<p><em>This is the fourth post in my &ldquo;2018 Roundup&rdquo; series. For an index of all entries, please see my
blog entry for <a href="https://dblohm7.ca/blog/2019/01/18/2018-roundup-q1/">Q1</a>.</em></p>

<p>Yes, you are reading the dates correctly: I am posting this nearly two years after I began this series.
I am trying to get caught up on documenting my past work!</p>

<h2>Fleshing Out the Launcher Process</h2>

<p>Once I had landed the <a href="https://dblohm7.ca/blog/2021/01/04/2018-roundup-q2-part2/">skeletal implementation</a>
of the launcher process, it was time to start making it do useful things.</p>

<h3>Ensuring Medium Integrity</h3>

<p>[<em>For an overview of Windows integrity levels, check out <a href="https://docs.microsoft.com/en-us/windows/win32/secauthz/mandatory-integrity-control">this MSDN page</a> &ndash; Aaron</em>]</p>

<p>Since Windows Vista, security tokens for standard users have declared a medium integrity level by default.
When UAC is enabled, members of the <code>Administrators</code> group also run as a standard user with a medium IL, with
the additional ability of being able to &ldquo;elevate&rdquo; themselves to a high IL. An administrator who disables UAC
has a token that is always high integrity.</p>

<p>Running a process at a high IL is something that is not to be taken lightly: at that level, the process may
alter system settings and access files that would otherwise be restricted by the OS.</p>

<p>While our sandboxed content processes always run at a low IL, I believed that defense-in-depth called for ensuring
that the browser process did not run at a high IL. In particular, I was concerned about cases where elevation
might be accidental. Consider, for example, a hypothetical scenario where a system administrator is running two
open command prompts, one elevated and one not, and they accidentally start Firefox from the one that is elevated.</p>

<p>This was a perfect use case for the launcher process: it detects whether it is running at high IL, and if so,
it launches the browser with medium integrity.</p>

<p>Unfortunately some users prefer to configure their accounts to run at all times as <code>Administrator</code> with high integrity!
This is <em>terrible</em> idea from a security perspective, but it is what it is; in my experience, most users who
run with this configuration do so deliberately, and they have no interest in being lectured about it.</p>

<p>Unfortunately, users running under this account configuration will experience side-effects of the Firefox browser
process running at medium IL. Specifically, a medium IL process is unable to initiate IPC connections with a process
running at a higher IL. This will break features such as drag-and-drop, since even the user&rsquo;s shell processes are running
at a higher IL than Firefox.</p>

<p>Being acutely aware of this issue, I included an escape hatch for these users: I implemented a command line option
that prevents the launcher process from de-elevating when running with a high IL. I hate that I needed to do this,
but moral suasion was not going to be an effective technique for solving this problem.</p>

<h3>Process Mitigation Policies</h3>

<p>Another tool that the launcher process enables us to utilize is process mitigation options. Introduced in Windows 8,
the kernel provides several opt-in flags that allows us to add prophylactic policies to our processes in an effort to
harden them against attacks.</p>

<p>Additional flags have been added over time, so we must be careful to only set flags that are supported by the version
of Windows on which we&rsquo;re running.</p>

<p>We could have set some of these policies by calling the
<a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprocessmitigationpolicy"><code>SetProcessMitigationPolicy</code></a> API.
Unfortunately this API is designed for a process to use on itself once it is already running. This implies that there
is a window of time between process creation and the time that the process enables its mitigations where an attack could occur.</p>

<p>Fortunately, Windows provides a second avenue for setting process mitigation flags: These flags may be set as part of
an attribute list in the <a href="https://docs.microsoft.com/en-us/windows/win32/api/winbase/ns-winbase-startupinfoexw"><code>STARTUPINFOEX</code></a>
structure that we pass into <code>CreateProcess</code>.</p>

<p>Perhaps you can now see where I am going with this: The launcher process enables us to specify process mitigation flags
for the browser process <em>at the time of browser process creation</em>, thus preventing the aforementioned window of opportunity
for attacks to occur!</p>

<p>While there are other flags that we could support in the future, the initial mitigation policy that I added was the
<a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-updateprocthreadattribute"><code>PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_ON</code></a>
flag. [<em>Note that I am only discussing flags applied to the browser process; sandboxed processes receive additional mitigations. &ndash; Aaron</em>]
This flag forces the Windows loader to always use the Windows <code>system32</code> directory as the first directory in its search path,
which prevents library preload attacks. Using this mitigation also gave us an unexpected performance gain on devices with
magnetic hard drives: most of our DLL dependencies are either loaded using absolute paths, or reside in <code>system32</code>. With
<code>system32</code> at the front of the loader&rsquo;s search path, the resulting reduction in hard disk seek times produced a slight but
meaningful decrease in browser startup time! How I made these measurements is addressed in a future post.</p>

<h3>Next Time</h3>

<p>This concludes the Q2 topics that I wanted to discuss. Thanks for reading! Coming up in <a href="https://dblohm7.ca/blog/2021/02/24/2018-roundup-h2/">H2</a>: Preparing to Enable the Launcher Process by Default.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2018 Roundup: Q2, Part 2]]></title>
    <link href="http://dblohm7.ca/blog/2021/01/04/2018-roundup-q2-part2/"/>
    <updated>2021-01-04T15:45:00-07:00</updated>
    <id>http://dblohm7.ca/blog/2021/01/04/2018-roundup-q2-part2</id>
    <content type="html"><![CDATA[<p><em>This is the third post in my &ldquo;2018 Roundup&rdquo; series. For an index of all entries, please see my
blog entry for <a href="https://dblohm7.ca/blog/2019/01/18/2018-roundup-q1/">Q1</a>.</em></p>

<p>Yes, you are reading the dates correctly: I am posting this nearly two years after I began this series.
I am trying to get caught up on documenting my past work!</p>

<h2>Implementing a Skeletal Launcher Process</h2>

<p>One of the things I added to Firefox for Windows was a new process called the &ldquo;launcher process.&rdquo;
&ldquo;Bootstrap process&rdquo; would be a better name, but we already used the term &ldquo;bootstrap&rdquo;
for our XPCOM initialization code. Instead of overloading that term and adding potential confusion,
I opted for using &ldquo;launcher process&rdquo; instead.</p>

<p>The launcher process is intended to be the first process that runs when the user starts
Firefox. Its sole purpose is to create the &ldquo;real&rdquo; browser process in a suspended state, set various
attributes on the browser process, resume the browser process, and then self-terminate.</p>

<p>In <a title="Skeletal bootstrap process" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1454745">bug 1454745</a> I implemented an initial skeletal (and opt-in) implementation of the
launcher process.</p>

<p>This seems like pretty straightforward code, right? Na&iuml;vely, one could just rip a <code>CreateProcess</code>
sample off of MSDN and call it day. The actual launcher process implmentation is more complicated than
that, for reasons that I will outline in the following sections.</p>

<h3>Built into <code>firefox.exe</code></h3>

<p>I wanted the launcher process to exist as a special &ldquo;mode&rdquo; of <code>firefox.exe</code>, as opposed to a distinct
executable.</p>

<h3>Performance</h3>

<p>By definition, the launcher process lies on the critical path to browser startup. I needed to be very
conscious of how we affect overall browser startup time.</p>

<p>Since the launcher process is built into <code>firefox.exe</code>, I needed to examine that executable&rsquo;s existing
dependencies to ensure that it is not loading any dependent libraries that are not actually needed
by the launcher process. Other than the essential Win32 DLLs <code>kernel32.dll</code>, <code>advapi32.dll</code> (and their
dependencies), I did not want anything else to load. In particular, I wanted to avoid loading <code>user32.dll</code>
and/or <code>gdi32.dll</code>, as this would trigger the initialization of Windows&#8217; GUI facilities, which would be a
huge performance killer. For that reason, most browser-mode library dependencies of <code>firefox.exe</code>
are either delay-loaded or are explicitly loaded via <code>LoadLibrary</code>.</p>

<h3>Safe Mode</h3>

<p>We wanted the launcher process to both respect Firefox&rsquo;s safe mode, as well as alter its behaviour
as necessary when safe mode is requested.</p>

<p>There are multiple mechanisms used by Firefox to detect safe mode. The launcher process detects
all of them except for one: Testing whether the user is holding the shift key. Retrieving keyboard
state would trigger loading of <code>user32.dll</code>, which would harm performance as I described above.</p>

<p>This is not too severe an issue in practice: The browser process itself would still detect the
shift key. Furthermore, while the launcher process may in theory alter its behaviour depending on
whether or not safe mode is requested, none of its behaviour changes are significant enough to
materially affect the browser&rsquo;s ability to start in safe mode.</p>

<p>Also note that, for serious cases where the browser is repeatedly unable to start,
the browser triggers a restart in safe mode via environment variable, which <em>is</em> a mechanism that
the launcher process honours.</p>

<h3>Testing and Automation</h3>

<p>We wanted the launcher process to behave well with respect to automated testing.</p>

<p>The skeletal launcher process that I landed in Q2 included code to pass its console handles
on to the browser process, but there was more work necessary to completely handle this case.
These capabilities were not yet an issue because the launcher process was opt-in at the time.</p>

<h3>Error Recovery</h3>

<p>We wanted the launcher process to gracefully handle failures even though, also by definition, it does not
have access to facilities that internal Gecko code has, such as telemetry and the crash reporter.</p>

<p>The skeletal launcher process that I landed in Q2 did not yet utilize any special error handling
code, but this was also not yet an issue because the launcher process was opt-in at this point.</p>

<h3>Next Time</h3>

<p>Thanks for reading! Coming up in <a href="https://dblohm7.ca/blog/2021/01/05/2018-roundup-q2-part3/">Q2, Part 3</a>: Fleshing Out the Launcher Process</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coming Around Full Circle]]></title>
    <link href="http://dblohm7.ca/blog/2019/09/30/coming-around-full-circle/"/>
    <updated>2019-09-30T10:30:00-06:00</updated>
    <id>http://dblohm7.ca/blog/2019/09/30/coming-around-full-circle</id>
    <content type="html"><![CDATA[<p>One thing about me that most Mozillians don&rsquo;t know is that, when I first applied to work at MoCo,
I had applied to work on the mobile platform. When all was said and done, it was decided at the time
that I would be a better fit for an opening on Taras Glek&rsquo;s platform performance team.</p>

<p>My first day at Mozilla was October 15, 2012 &ndash; I will be celebrating my seventh anniversary at MoCo in
just a couple short weeks! Some people with similar tenures have suggested to me that we are now
&ldquo;old guard,&rdquo; but I&rsquo;m not sure that I feel that way! Anyway, I digress.</p>

<p>The platform performance team eventually evolved into a desktop-focused performance team by late 2013.
By the end of 2015 I had decided that it was time for a change, and by March 2016 I had moved over to
work for Jim Mathies, focusing on Gecko integration with Windows. I ended up spending the next twenty
or so months helping the accessibility team port their Windows implementation over to multiprocess.</p>

<p>Once Firefox Quantum 57 hit the streets, I scoped out and provided technical leadership for the
InjectEject project, whose objective was to tackle some of the root problems with DLL injection that
were causing us grief in Windows-land.</p>

<p>I am proud to say that, over the past three years on Jim&rsquo;s team, I have done the best work of my career.
I&rsquo;d like to thank Brad Lassey (now at Google) for his willingness to bring me over to his group, as well as
Jim, and David Bolter (a11y manager at the time) for their confidence in me. As somebody who had spent most
of his adult life having no confidence in his work whatsoever, their willingness to entrust me with
taking on those risks and responsibilities made an enormous difference in my self esteem and my
professional life.</p>

<p>Over the course of H1 2019, I began to feel restless again. I knew it was time for another change. What
I did not expect was that the agent of that change would be James Willcox, aka Snorp. In Whistler, Snorp
planted the seed in my head that I might want to come over to work with him on GeckoView, within the
mobile group which David was now managing.</p>

<p>The timing seemed perfect, so I made the decision to move to GeckoView. I had to finish tying up some
loose ends with InjectEject, so all the various stakeholders agreed that I&rsquo;d move over at the end of Q3 2019.</p>

<p>Which brings me to this week, when I officially join the GeckoView team, working for Emily Toop. I find
it somewhat amusing that I am now joining the team that evolved from the team that I had originally applied
for back in 2012. I have truly come full circle in my career at Mozilla!</p>

<p>So, what&rsquo;s next?</p>

<ul>
<li><p>I have a couple of InjectEject bugs that are pretty much finished, but just need some polish and
code reviews before landing.</p></li>
<li><p>For the next month or two at least, I am going to continue to meet weekly with Jim to assist with
the transition as he ramps up new staff on the project.</p></li>
<li><p>I still plan to be the module owner for the Firefox Launcher Process and the MSCOM library, however most
day-to-day work will be done by others going forward;</p></li>
<li><p>I will continue to serve as the mozglue peer in charge of the DLL blocklist and DLL interceptor, with
the same caveat.</p></li>
</ul>


<p>Switching over to Android from Windows does not mean that I am leaving my Windows experience at the door; I
would like to continue to be a resource on that front, so I would encourage people to continue to ask me
for advice.</p>

<p>On the other hand, I am very much looking forward to stepping back into the mobile space. My first crack at
mobile was as an intern back in 2003, when I was working with some code that had to run on PalmOS 3.0! I have not
touched Android since I shipped a couple of utility apps back in 2011, so I am looking forward to learning
more about what has changed. I am also looking forward to learning more about native development on Android,
which is something that I never really had a chance to try.</p>

<p>As they used to say on Monty Python&rsquo;s Flying Circus, &ldquo;And now for something completely different!&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2018 Roundup: Q2, Part 1]]></title>
    <link href="http://dblohm7.ca/blog/2019/01/23/2018-roundup-q2-part1/"/>
    <updated>2019-01-23T18:30:00-07:00</updated>
    <id>http://dblohm7.ca/blog/2019/01/23/2018-roundup-q2-part1</id>
    <content type="html"><![CDATA[<p><em>This is the second post in my &ldquo;2018 Roundup&rdquo; series. For an index of all entries, please see my
blog entry for <a href="https://dblohm7.ca/blog/2019/01/18/2018-roundup-q1/">Q1</a>.</em></p>

<h2>Refactoring the DLL Interceptor</h2>

<p>As I have alluded to <a href="https://dblohm7.ca/blog/2016/01/11/bugs-from-hell-injected-third-party-code-plus-detours-equals-a-bad-time/">previously</a>,
Gecko includes a Detours-style API hooking mechanism for Windows. In Gecko, this code is referred to
as the &ldquo;DLL Interceptor.&rdquo; We use the DLL interceptor to instrument various functions within our own
processes. As a prerequisite for future DLL injection mitigations, I needed to spend a good chunk of
Q2 refactoring this code. While I was in there, I took the opportunity to improve the interceptor&rsquo;s
memory efficiency, thus benefitting the Fission MemShrink project. [<em>When these changes landed, we were
not yet tracking the memory savings, but I will include a rough estimate <a href="#vmsharing">later</a> in this post.</em>]</p>

<h3>A Brief Overview of Detours-style API Hooking</h3>

<p>While many distinct function hooking techniques are used in the Windows ecosystem, the Detours-style
hook is one of the most effective and most popular. While I am not going to go into too many specifics
here, I&rsquo;d like to offer a quick overview. In this description, &ldquo;target&rdquo; is the function being hooked.</p>

<p>Here is what happens when a function is detoured:</p>

<ol>
<li><p>Allocate a chunk of memory to serve as a &ldquo;trampoline.&rdquo; We must be able to adjust the protection
attributes on that memory.</p></li>
<li><p>Disassemble enough of the target to make room for a <code>jmp</code> instruction. On 32-bit x86 processors,
this requires 5 bytes. x86-64 is more complicated, but generally, to <code>jmp</code> to an absolute address, we
try to make room for 13 bytes.</p></li>
<li><p>Copy the instructions from step 2 over to the trampoline.</p></li>
<li><p>At the beginning of the target function, write a <code>jmp</code> to the hook function.</p></li>
<li><p>Append additional instructions to the trampoline that, when executed, will cause the processor to
jump back to the first valid instruction after the <code>jmp</code> written in step 4.</p></li>
<li><p>If the hook function wants to pass control on to the original target function, it calls the
trampoline.</p></li>
</ol>


<p>Note that these steps don&rsquo;t occur <em>exactly</em> in the order specified above; I selected the above ordering
in an effort to simplify my description.</p>

<p>Here is my attempt at visualizing the control flow of a detoured function on x86-64:</p>

<p><img class="<a" src="href="https://dblohm7.ca/images/detours_hook.svg">https://dblohm7.ca/images/detours_hook.svg</a>&#8221;></p>

<h3>Refactoring</h3>

<p>Previously, the DLL interceptor relied on directly manipulating pointers in order to read and write the
various instructions involved in the hook. In <a title="Parameterize memory operations in WindowsDllInterceptor" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1432653">bug 1432653</a> I changed things so that the memory
operations are parameterized based on two orthogonal concepts:</p>

<ul>
<li>In-process vs out-of-process memory access: I wanted to be able to abstract reads and writes such
that we could optionally set a hook in another process from our own.</li>
<li>Virtual memory allocation scheme: I wanted to be able to change how trampoline memory was allocated.
Previously, each instance of <code>WindowsDllInterceptor</code> allocated its own page of memory for trampolines,
but each instance also typically only sets one or two hooks. This means that most of the 4KiB page
was unused. Furthermore, since Windows allocates blocks of pages on a 64KiB boundary, this wasted a
lot of precious virtual address space in our 32-bit builds.</li>
</ul>


<p>By refactoring and parameterizing these operations, we ended up with the following combinations:</p>

<ul>
<li>In-process memory access, each <code>WindowsDllInterceptor</code> instance receives its own trampoline space;</li>
<li>In-process memory access, all <code>WindowsDllInterceptor</code> instances within a module <em>share</em> trampoline space;</li>
<li>Out-of-process memory access, each <code>WindowsDllInterceptor</code> instance receives its own trampoline space;</li>
<li>Out-of-process memory access, all <code>WindowsDllInterceptor</code> instances within a module share trampoline space (currently
not implemented as this option is not particularly useful at the moment).</li>
</ul>


<p>Instead of directly manipulating pointers, we now use instances of <code>ReadOnlyTargetFunction</code>,
<code>WritableTargetFunction</code>, and <code>Trampoline</code> to manipulate our code/data. Those classes in turn use the
memory management and virtual memory allocation policies to perform the actual reading and writing.</p>

<h3>Memory Management Policies</h3>

<p>The interceptor now supports two policies, <code>MMPolicyInProcess</code> and <code>MMPolicyOutOfProcess</code>. Each policy
must implement the following memory operations:</p>

<ul>
<li>Read</li>
<li>Write</li>
<li>Change protection attributes</li>
<li>Reserve trampoline space</li>
<li>Commit trampoline space</li>
</ul>


<p><code>MMPolicyInProcess</code> is implemented using <code>memcpy</code> for read and write, <code>VirtualProtect</code>
for protection attribute changes, and <code>VirtualAlloc</code> for reserving and committing trampoline space.</p>

<p><code>MMPolicyOutOfProcess</code> uses <code>ReadProcessMemory</code> and <code>WriteProcessMemory</code> for read and write. As a perf
optimization, we try to batch reads and writes together to reduce the system call traffic. We obviously
use <code>VirtualProtectEx</code> to adjust protection attributes in the other process.</p>

<p>Out-of-process trampoline reservation and commitment, however, is a bit different and is worth a
separate call-out. We allocate trampoline space using shared memory. It is mapped into the local
process with read+write permissions using <code>MapViewOfFile</code>. The memory is mapped into the remote process
as read+execute using some code that I wrote in <a title="Add out-of-process memory access policies to DLL interceptor" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1451511">bug 1451511</a> that either uses <code>NtMapViewOfSection</code> or
<code>MapViewOfFile2</code>, depending on availability. Individual pages from those chunks are then committed via
<code>VirtualAlloc</code> in the local process and <code>VirtualAllocEx</code> in the remote process. This scheme enables
us to read and write to trampoline memory directly, without needing to do cross-process reads and writes!</p>

<h3>VM Sharing Policies</h3>

<p>The code for these policies is a lot simpler than the code for the memory management policies. We now
have <code>VMSharingPolicyUnique</code> and <code>VMSharingPolicyShared</code>. Each of these policies must implement the
following operations:</p>

<ul>
<li>Reserve space for up to <em>N</em> trampolines of size <em>K</em>;</li>
<li>Obtain a <code>Trampoline</code> object for the next available <em>K</em>-byte trampoline slot;</li>
<li>Return an iterable collection of all extant trampolines.</li>
</ul>


<p><code>VMSharingPolicyShared</code> is actually implemented by delegating to a <code>static</code> instance of
<code>VMSharingPolicyUnique</code>.</p>

<h3>Implications of Refactoring</h3>

<p>To determine the performance implications, I added timings to our DLL Interceptor unit test. I was
very happy to see that, despite the additional layers of abstraction, the C++ compiler&rsquo;s optimizer was
doing its job: There was no performance impact whatsoever!</p>

<p><a name="vmsharing"></a>Once the refactoring was complete, I switched the default VM Sharing Policy for <code>WindowsDllInterceptor</code>
over to <code>VMSharingPolicyShared</code> in <a title="DLL interceptors should share trampoline VM" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1451524">bug 1451524</a>.</p>

<p>Browsing today&rsquo;s <code>mozilla-central</code> tip, I count 14 locations where we instantiate interceptors inside
<code>xul.dll</code>. Given that not all interceptors are necessarily instantiated at once, I am now offering a
worst-case back-of-the-napkin estimate of the memory savings:</p>

<ul>
<li>Each interceptor would likely be consuming 4KiB (most of which is unused) of committed VM. Due to
Windows&#8217; 64 KiB allocation guanularity, each interceptor would be leaving a further 60KiB
of address space in a free but unusable state. Assuming all 14 interceptors were actually instantiated,
they would thus consume a combined 56KiB of committed VM and 840KiB of free but unusable address space.</li>
<li>By sharing trampoline VM, the interceptors would consume only 4KiB combined and waste only 60KiB of
address space, thus yielding savings of 52KiB in committed memory and 780KiB in addressable memory.</li>
</ul>


<h3>Oh, and One More Thing</h3>

<p>Another problem that I discovered during this refactoring was <a title="Repeated failed function hook attempts cause exhaustion of interceptor trampoline space" href="https://bugzilla.mozilla.org/show_bug.cgi?id=1459335">bug 1459335</a>. It turns out that some
of the interceptor&rsquo;s callers were not distinguishing between &ldquo;I have not set this hook yet&rdquo; and &ldquo;I
attempted to set this hook but it failed&rdquo; scenarios. Across several call sites, I discovered that
our code would repeatedly retry to set hooks even when they had previously failed, causing leakage
of trampoline space!</p>

<p>To fix this, I modified the interceptor&rsquo;s interface so that we use one-time initialization APIs to
set hooks; since landing this bug, it is no longer possible for clients of the DLL interceptor to
set a hook that had previously failed to be set.</p>

<p>Quantifying the memory costs of this bug is&hellip; non-trivial, but it suffices to say that fixing
this bug probably resulted in the savings of at least a few hundred KiB in committed VM on
affected machines.</p>

<p>That&rsquo;s it for today&rsquo;s post, folks! Thanks for reading! Coming up in <a href="https://dblohm7.ca/blog/2021/01/04/2018-roundup-q2-part2/">Q2, Part 2</a>: Implementing a Skeletal Launcher Process</p>
]]></content>
  </entry>
  
</feed>
