---
layout: post
title: "2018 Roundup: Q2"
date: 2019-01-21 14:18:17 -0700
comments: true
categories: [Mozilla, roundups, DLL Injection]
---
*This is the second post in my "2018 Roundup" series. For an index of all entries, please see my 
blog entry for [Q1](http://dblohm7.ca/blog/2019/01/18/2018-roundup-q1/).*

Refactoring the DLL Interceptor
-------------------------------

As I have alluded to [previously](http://dblohm7.ca/blog/2016/01/11/bugs-from-hell-injected-third-party-code-plus-detours-equals-a-bad-time/), 
Gecko includes a Detours-style API hooking mechanism for Windows. In Gecko, this code is referred to 
as the "DLL Interceptor." We use the DLL interceptor to instrument various functions within our own 
processes. As a prerequisite for future DLL injection mitigations, I needed to spend a good chunk of 
Q2 refactoring this code. While I was in there, I took the opportunity to improve the interceptor's 
memory efficiency, thus benefitting the Fission MemShrink project. [*When these changes landed, we were 
not yet tracking the memory savings, but I will include a rough estimate later in this post.*]


### A Brief Overview of Detours-style API Hooking

While many distinct function hooking techniques are used in the Windows ecosystem, the Detours-style 
hook is one of the most effective and most popular. While I am not going to go into too many specifics 
here, I'd like to offer a quick overview. In this description, "target" is the function being hooked.

Here is what happens when a function is detoured:

1. Allocate a chunk of memory to serve as a "trampoline."

2. Disassemble enough of the target to make room for a `jmp` instruction. On 32-bit x86 processors, 
this requires 5 bytes. x86-64 is more complicated, but generally, to `jmp` to an absolute address, we 
try to make room for 13 bytes.

3. Copy the instructions from step 2 over to the trampoline.

4. At the beginning of the target function, write a `jmp` to the hook function.

5. Append additional instructions to the trampoline that, when executed, will cause the processor to 
jump back to the first valid instruction after the `jmp` written in step 4.

6. If the hook function wants to pass control on to the original target function, it calls the 
trampoline.

Note that these steps don't occur *exactly* in the order specified above; I selected the above ordering 
in an effort to simplify my description.

Here is an attempt at visualizing the control flow of a detoured function on x86-64:

{% img http://dblohm7.ca/images/detours_hook.svg %}

### Refactoring

